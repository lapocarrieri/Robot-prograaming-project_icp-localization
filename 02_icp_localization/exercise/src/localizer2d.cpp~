#include "localizer2d.h"
#include "eigen_kdtree.h"
#include "icp/eigen_icp_2d.h"
#include "eigen_kdtree.h"
#include <iostream>
#include <fstream>
#include <ros/ros.h>
Localizer2D::Localizer2D()
    : _map(nullptr),
      _laser_in_world(Eigen::Isometry2f::Identity()),
      _obst_tree_ptr(std::make_shared<TreeType>(_obst_vect.begin(), _obst_vect.end())),
      kd_tree(_obst_vect.begin(), _obst_vect.end(), 10) {
}



/**
 * @brief Set the internal map reference and constructs the KD-Tree containing
 * obstacles coordinates for fast access.
 *
 * @param map_
 */



// Define the tree node type using the container's iterator



void Localizer2D::setMap(std::shared_ptr<Map> map_) {
  // Set the internal map pointer
  _map = map_;
   // Check if the map is initialized
    if (_map) {
        // Get map size (rows and columns)
        size_t mapRows = _map->rows();
        size_t mapCols = _map->cols();

        // Clear any existing obstacle data in _obst_vect
        

        // Get the map grid data
        const std::vector<int8_t>& mapGrid = _map->grid();

        // Iterate through the occupancy grid to find obstacles
        for (size_t row = 0; row < mapRows; ++row) {
            for (size_t col = 0; col < mapCols; ++col) {
                // Get the cell type from the grid data
                int8_t cellType = mapGrid[row * mapCols + col];

                // Check if the cell represents an obstacle
                if (cellType == static_cast<int8_t>(CellType::Occupied)) {
                    // Calculate the world coordinates of the obstacle cell
                    float worldX = col * _map->resolution(); // Convert map column to world X
                    float worldY = row * _map->resolution(); // Convert map row to world Y

                    // Create a PointType (Eigen::Vector2f) for the obstacle and add it to _obst_vect
                    PointType obstaclePoint(worldX, worldY);
                  _obst_vect.push_back(obstaclePoint);
                
		  //std::cout << "Added obstacle at X: " << worldX << ", Y: " << worldY << std::endl;
                }
	    }
	}
	 std::cout << "the size of the predicted is:"<< _obst_vect.size() << std::endl;
	kd_tree = TreeType(_obst_vect.begin(), _obst_vect.end(), 10);
	//	kd_tree.printTree();
	   
         

    }
}

/**
 * @brief Set the current estimate for laser_in_world
 *
 * @param initial_pose_
 */
void Localizer2D::setInitialPose(const Eigen::Isometry2f& initial_pose_) {
  // TODO
  _laser_in_world = initial_pose_;
  _laser_in_world.rotate(180);
}

/**
 * @brief Process the input scan.
 * First creates a prediction using the current laser_in_world estimate
 *
 * @param scan_
 */
void Localizer2D::process(const ContainerType& scan_) {
  // Use initial pose to get a synthetic scan to compare with scan_
  // TODO
  // initial pose is an Isometry2 and it is inside _lase_in_world while containerType is   using ContainerType = std::vector<PointType, Eigen::aligned_allocator<PointType>>;
  // Define a point representing the origin (0, 0)
  
  getPrediction(prediction_);

  if (scan_fixed.size() == 0) {
    scan_fixed = scan_;
    ROS_INFO("Storing scan as fixed.");
   
  }

  /**
   * Align prediction and scan_ using ICP.
   * Set the current estimate of laser in world as initial guess (replace the
   * solver X before running ICP)
   */
  int _num_iterations  = 10;
  int _min_points_in_leaf = 10;


 
  ICP icp(prediction_,scan_,_min_points_in_leaf);
 icp.X()=_laser_in_world;
 
 //ROS_INFO("Scan1 pos=(%f, %f,%f)]", _laser_in_world.translation().x(), _laser_in_world.translation().y(),_laser_in_world.rotation());
  icp.run(_num_iterations);
  // std::cout << "Isometry2f prima:" << std::endl;
   // std::cout << "Translation:" << std::endl <<  _laser_in_world.translation() << std::endl;
    //std::cout << "Rotation Matrix:" << std::endl << _laser_in_world.linear() << std::endl;
    _laser_in_world= icp.X();
    //ROS_INFO("Scan2 pos=(%f, %f,%f)]", _laser_in_world.translation().x(), _laser_in_world.translation().y(),_laser_in_world.rotation());
    //_laser_in_world = _laser_in_world *icp.X();
  
  // std::cout << "Isometry2fdopo :" << std::endl;
  // std::cout << "Translation:" << std::endl <<  _laser_in_world.translation() << std::endl;
  // std::cout << "Rotation Matrix:" << std::endl << _laser_in_world.linear() << std::endl
   float rotation_angle = atan2( _laser_in_world.linear()(1, 0),  _laser_in_world.linear()(0, 0));

    ROS_INFO("Scan [Points:(nearby:%ld,predicted:%ld,reals:%ld),chi:%f,pos=(%f, %f,%f)]",prediction_normal.size(),prediction_.size(), scan_.size(), icp.chi(),
	     _laser_in_world.translation().x(), _laser_in_world.translation().y(), (rotation_angle*360)/2*M_PI);


     scan_fixed = scan_;
    


    /**
   * Store the solver result (X) as the new laser_in_world estimate
   *
   */
  // TODO

  
}

/**
 * @brief Set the parameters of the laser scanner. Used to predict
 * measurements.
 * These parameters should be taken from the incoming sensor_msgs::LaserScan
 * message
 *
 * For further documentation, refer to:
 * http://docs.ros.org/en/noetic/api/sensor_msgs/html/msg/LaserScan.html
 *
 *
 * @param range_min_
 * @param range_max_
 * @param angle_min_
 * @param angle_max_
 * @param angle_increment_
 */
void Localizer2D::setLaserParams(float range_min_, float range_max_,
                                 float angle_min_, float angle_max_,
                                 float angle_increment_) {
  _range_min = range_min_;
  _range_max = range_max_;
  _angle_min = angle_min_;
  _angle_max = angle_max_;
  _angle_increment = angle_increment_;
}

/**
 * @brief Computes the predicted scan at the current laser_in_world pose
 * estimate.
 *
 * @param dest_ Output predicted scan
 */

void Localizer2D::getPrediction(ContainerType& prediction_) {
  prediction_.clear();
  prediction_normal.clear();
  /**
   * To compute the prediction, query the KD-Tree and search for all points
   * around the current laser_in_world estimate.
   * You may use additional sensor's informations to refine the prediction.
   */
  // TODO
 
    // Check if the KD-Tree is initialized
  if (_obst_tree_ptr) {
    // Perform a full search to find all points within the search radius
    AnswerType answers;
    kd_tree.fullSearch(answers, _laser_in_world.translation(), _range_max);
    // std::cerr << "anche qui" << std::endl;
    // Extract the matching points from the answers
   
     
      
    for (PointType* point : answers) {
       prediction_normal.push_back(*point);
       Eigen::Matrix<float, 2, 1> actual_point = *point;
       Eigen::Matrix<float, 2, 1> transformed_point = _laser_in_world.inverse() * actual_point;
        // Calculate polar coordinates of the transformed point
        float range = transformed_point.norm();
        float angle = std::atan2(transformed_point.y(), transformed_point.x());
	prediction_normal.push_back(actual_point);
        // Check if the point is within the laser range and angle
        if (range >= _range_min && range <= _range_max &&
            angle >= _angle_min && angle <= _angle_max) {
            prediction_.push_back(actual_point);
	    
        }
    
    }
   
    //std::cerr << "the size of the predicted is:" <<prediction_.size()<<std::endl;
    //std::cerr << "the size of the predicted is:" <<prediction_normal.size()<<std::endl;
  } else {
    // Handle the case where the KD-Tree is not initialized (no points to search)
    
    std::cerr << "KD-Tree is not initialized. Cannot compute prediction." << std::endl;
  }
  //for (const PointType& point : prediction_) {
    //std::cout << "X: " << point.x() << ", Y: " << point.y() << std::endl;
      // }
  // std::cerr << "the size of the predicted is:"<< prediction_.size() << std::endl;
}
